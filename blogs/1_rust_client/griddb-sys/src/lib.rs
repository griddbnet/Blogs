/* automatically generated by rust-bindgen 0.59.2 */
#![allow(warnings, unused)]
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &[u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const GS_CLIENT_VERSION_MAJOR: u32 = 4;
pub const GS_CLIENT_VERSION_MINOR: u32 = 3;
pub const GS_INTERNAL_DEFINITION_VISIBLE: u32 = 1;
pub const GS_DEPRECATION_IGNORABLE: u32 = 0;
pub const GS_DEPRECATED_FUNC_ENABLED: u32 = 1;
pub const GS_EXPERIMENTAL_TOOL_ENABLED: u32 = 0;
pub const GS_COMPATIBILITY_FACTORY_BETA_0_3: u32 = 0;
pub const GS_COMPATIBILITY_TIME_SERIES_PROPERTIES_0_0_10: u32 = 0;
pub const GS_COMPATIBILITY_TIME_SERIES_SAMPLING_BETA_0_1: u32 = 0;
pub const GS_COMPATIBILITY_GET_MULTIPLE_ROWS_BETA_0_3: u32 = 0;
pub const GS_COMPATIBILITY_VALUE_1_1_106: u32 = 0;
pub const GS_COMPATIBILITY_MULTIPLE_CONTAINERS_1_1_106: u32 = 0;
pub const GS_COMPATIBILITY_DEPRECATE_FETCH_OPTION_SIZE: u32 = 1;
pub const GS_COMPATIBILITY_SUPPORT_1_5: u32 = 1;
pub const GS_COMPATIBILITY_SUPPORT_2_0: u32 = 1;
pub const GS_COMPATIBILITY_SUPPORT_2_1: u32 = 1;
pub const GS_COMPATIBILITY_SUPPORT_3_5: u32 = 1;
pub const GS_COMPATIBILITY_SUPPORT_4_0: u32 = 1;
pub const GS_COMPATIBILITY_SUPPORT_4_1: u32 = 1;
pub const GS_COMPATIBILITY_SUPPORT_4_2: u32 = 1;
pub const GS_COMPATIBILITY_SUPPORT_4_3: u32 = 1;
pub const GS_TRUE: u32 = 1;
pub const GS_FALSE: u32 = 0;
pub const GS_RESULT_OK: u32 = 0;
pub const GS_TIMESTAMP_DEFAULT: u32 = 0;
pub const GS_TIME_STRING_SIZE_MAX: u32 = 32;
pub const GS_TIME_ZONE_STRING_SIZE_MAX: u32 = 8;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type GSChar = ::std::os::raw::c_char;
pub type GSBool = ::std::os::raw::c_char;
pub type GSEnum = i32;
pub type GSTimestamp = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSGridStoreFactoryTag {
    _unused: [u8; 0],
}
pub type GSGridStoreFactory = GSGridStoreFactoryTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSGridStoreTag {
    _unused: [u8; 0],
}
pub type GSGridStore = GSGridStoreTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSContainerTag {
    _unused: [u8; 0],
}
pub type GSContainer = GSContainerTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSQueryTag {
    _unused: [u8; 0],
}
pub type GSQuery = GSQueryTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSRowSetTag {
    _unused: [u8; 0],
}
pub type GSRowSet = GSRowSetTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSAggregationResultTag {
    _unused: [u8; 0],
}
pub type GSAggregationResult = GSAggregationResultTag;
pub type GSCollection = GSContainer;
pub type GSTimeSeries = GSContainer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSRowTag {
    _unused: [u8; 0],
}
pub type GSRow = GSRowTag;
pub type GSRowKey = GSRow;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSRowKeyPredicateTag {
    _unused: [u8; 0],
}
pub type GSRowKeyPredicate = GSRowKeyPredicateTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSPartitionControllerTag {
    _unused: [u8; 0],
}
pub type GSPartitionController = GSPartitionControllerTag;
pub type GSResult = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSBlobTag {
    pub size: size_t,
    pub data: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_GSBlobTag() {
    assert_eq!(
        ::std::mem::size_of::<GSBlobTag>(),
        16usize,
        concat!("Size of: ", stringify!(GSBlobTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSBlobTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSBlobTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSBlobTag>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSBlobTag),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSBlobTag>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSBlobTag),
            "::",
            stringify!(data)
        )
    );
}
pub type GSBlob = GSBlobTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSPropertyEntryTag {
    pub name: *const GSChar,
    pub value: *const GSChar,
}
#[test]
fn bindgen_test_layout_GSPropertyEntryTag() {
    assert_eq!(
        ::std::mem::size_of::<GSPropertyEntryTag>(),
        16usize,
        concat!("Size of: ", stringify!(GSPropertyEntryTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSPropertyEntryTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSPropertyEntryTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSPropertyEntryTag>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSPropertyEntryTag),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSPropertyEntryTag>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSPropertyEntryTag),
            "::",
            stringify!(value)
        )
    );
}
pub type GSPropertyEntry = GSPropertyEntryTag;
pub const GSFetchOptionTag_GS_FETCH_LIMIT: GSFetchOptionTag = 0;
pub const GSFetchOptionTag_GS_FETCH_PARTIAL_EXECUTION: GSFetchOptionTag = 2;
pub type GSFetchOptionTag = ::std::os::raw::c_uint;
extern "C" {
    pub static GS_FETCH_SIZE: GSFetchOptionTag;
}
pub type GSFetchOption = GSEnum;
pub const GSQueryOrderTag_GS_ORDER_ASCENDING: GSQueryOrderTag = 0;
pub const GSQueryOrderTag_GS_ORDER_DESCENDING: GSQueryOrderTag = 1;
pub type GSQueryOrderTag = ::std::os::raw::c_uint;
pub type GSQueryOrder = GSEnum;
pub const GSIndexTypeFlagTag_GS_INDEX_FLAG_DEFAULT: GSIndexTypeFlagTag = -1;
pub const GSIndexTypeFlagTag_GS_INDEX_FLAG_TREE: GSIndexTypeFlagTag = 1;
pub const GSIndexTypeFlagTag_GS_INDEX_FLAG_HASH: GSIndexTypeFlagTag = 2;
pub const GSIndexTypeFlagTag_GS_INDEX_FLAG_SPATIAL: GSIndexTypeFlagTag = 4;
pub type GSIndexTypeFlagTag = ::std::os::raw::c_int;
pub type GSIndexTypeFlags = i32;
pub const GSAggregationTag_GS_AGGREGATION_MINIMUM: GSAggregationTag = 0;
pub const GSAggregationTag_GS_AGGREGATION_MAXIMUM: GSAggregationTag = 1;
pub const GSAggregationTag_GS_AGGREGATION_TOTAL: GSAggregationTag = 2;
pub const GSAggregationTag_GS_AGGREGATION_AVERAGE: GSAggregationTag = 3;
pub const GSAggregationTag_GS_AGGREGATION_VARIANCE: GSAggregationTag = 4;
pub const GSAggregationTag_GS_AGGREGATION_STANDARD_DEVIATION: GSAggregationTag = 5;
pub const GSAggregationTag_GS_AGGREGATION_COUNT: GSAggregationTag = 6;
pub const GSAggregationTag_GS_AGGREGATION_WEIGHTED_AVERAGE: GSAggregationTag = 7;
pub type GSAggregationTag = ::std::os::raw::c_uint;
pub type GSAggregation = GSEnum;
pub const GSInterpolationModeTag_GS_INTERPOLATION_LINEAR_OR_PREVIOUS: GSInterpolationModeTag = 0;
pub const GSInterpolationModeTag_GS_INTERPOLATION_EMPTY: GSInterpolationModeTag = 1;
pub type GSInterpolationModeTag = ::std::os::raw::c_uint;
pub type GSInterpolationMode = GSEnum;
pub const GSTimeOperatorTag_GS_TIME_OPERATOR_PREVIOUS: GSTimeOperatorTag = 0;
pub const GSTimeOperatorTag_GS_TIME_OPERATOR_PREVIOUS_ONLY: GSTimeOperatorTag = 1;
pub const GSTimeOperatorTag_GS_TIME_OPERATOR_NEXT: GSTimeOperatorTag = 2;
pub const GSTimeOperatorTag_GS_TIME_OPERATOR_NEXT_ONLY: GSTimeOperatorTag = 3;
pub type GSTimeOperatorTag = ::std::os::raw::c_uint;
pub type GSTimeOperator = GSEnum;
pub const GSGeometryOperatorTag_GS_GEOMETRY_OPERATOR_INTERSECT: GSGeometryOperatorTag = 0;
pub type GSGeometryOperatorTag = ::std::os::raw::c_uint;
pub type GSGeometryOperator = GSEnum;
pub const GSCompressionMethodTag_GS_COMPRESSION_NO: GSCompressionMethodTag = 0;
pub const GSCompressionMethodTag_GS_COMPRESSION_SS: GSCompressionMethodTag = 1;
pub const GSCompressionMethodTag_GS_COMPRESSION_HI: GSCompressionMethodTag = 2;
pub type GSCompressionMethodTag = ::std::os::raw::c_uint;
pub type GSCompressionMethod = GSEnum;
pub const GSTimeUnitTag_GS_TIME_UNIT_YEAR: GSTimeUnitTag = 0;
pub const GSTimeUnitTag_GS_TIME_UNIT_MONTH: GSTimeUnitTag = 1;
pub const GSTimeUnitTag_GS_TIME_UNIT_DAY: GSTimeUnitTag = 2;
pub const GSTimeUnitTag_GS_TIME_UNIT_HOUR: GSTimeUnitTag = 3;
pub const GSTimeUnitTag_GS_TIME_UNIT_MINUTE: GSTimeUnitTag = 4;
pub const GSTimeUnitTag_GS_TIME_UNIT_SECOND: GSTimeUnitTag = 5;
pub const GSTimeUnitTag_GS_TIME_UNIT_MILLISECOND: GSTimeUnitTag = 6;
pub type GSTimeUnitTag = ::std::os::raw::c_uint;
pub type GSTimeUnit = GSEnum;
pub const GSContainerTypeTag_GS_CONTAINER_COLLECTION: GSContainerTypeTag = 0;
pub const GSContainerTypeTag_GS_CONTAINER_TIME_SERIES: GSContainerTypeTag = 1;
pub type GSContainerTypeTag = ::std::os::raw::c_uint;
pub type GSContainerType = GSEnum;
pub const GSTypeTag_GS_TYPE_STRING: GSTypeTag = 0;
pub const GSTypeTag_GS_TYPE_BOOL: GSTypeTag = 1;
pub const GSTypeTag_GS_TYPE_BYTE: GSTypeTag = 2;
pub const GSTypeTag_GS_TYPE_SHORT: GSTypeTag = 3;
pub const GSTypeTag_GS_TYPE_INTEGER: GSTypeTag = 4;
pub const GSTypeTag_GS_TYPE_LONG: GSTypeTag = 5;
pub const GSTypeTag_GS_TYPE_FLOAT: GSTypeTag = 6;
pub const GSTypeTag_GS_TYPE_DOUBLE: GSTypeTag = 7;
pub const GSTypeTag_GS_TYPE_TIMESTAMP: GSTypeTag = 8;
pub const GSTypeTag_GS_TYPE_GEOMETRY: GSTypeTag = 9;
pub const GSTypeTag_GS_TYPE_BLOB: GSTypeTag = 10;
pub const GSTypeTag_GS_TYPE_STRING_ARRAY: GSTypeTag = 11;
pub const GSTypeTag_GS_TYPE_BOOL_ARRAY: GSTypeTag = 12;
pub const GSTypeTag_GS_TYPE_BYTE_ARRAY: GSTypeTag = 13;
pub const GSTypeTag_GS_TYPE_SHORT_ARRAY: GSTypeTag = 14;
pub const GSTypeTag_GS_TYPE_INTEGER_ARRAY: GSTypeTag = 15;
pub const GSTypeTag_GS_TYPE_LONG_ARRAY: GSTypeTag = 16;
pub const GSTypeTag_GS_TYPE_FLOAT_ARRAY: GSTypeTag = 17;
pub const GSTypeTag_GS_TYPE_DOUBLE_ARRAY: GSTypeTag = 18;
pub const GSTypeTag_GS_TYPE_TIMESTAMP_ARRAY: GSTypeTag = 19;
pub const GSTypeTag_GS_TYPE_NULL: GSTypeTag = -1;
pub type GSTypeTag = ::std::os::raw::c_int;
pub type GSType = GSEnum;
pub const GSTypeOptionTag_GS_TYPE_OPTION_KEY: GSTypeOptionTag = 1;
pub const GSTypeOptionTag_GS_TYPE_OPTION_NULLABLE: GSTypeOptionTag = 2;
pub const GSTypeOptionTag_GS_TYPE_OPTION_NOT_NULL: GSTypeOptionTag = 4;
pub const GSTypeOptionTag_GS_TYPE_OPTION_DEFAULT_VALUE_NULL: GSTypeOptionTag = 8;
pub const GSTypeOptionTag_GS_TYPE_OPTION_DEFAULT_VALUE_NOT_NULL: GSTypeOptionTag = 16;
pub type GSTypeOptionTag = ::std::os::raw::c_uint;
pub type GSTypeOption = i32;
pub const GSRowSetTypeTag_GS_ROW_SET_CONTAINER_ROWS: GSRowSetTypeTag = 0;
pub const GSRowSetTypeTag_GS_ROW_SET_AGGREGATION_RESULT: GSRowSetTypeTag = 1;
pub const GSRowSetTypeTag_GS_ROW_SET_QUERY_ANALYSIS: GSRowSetTypeTag = 2;
pub type GSRowSetTypeTag = ::std::os::raw::c_uint;
pub type GSRowSetType = GSEnum;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSColumnCompressionTag {
    pub columnName: *const GSChar,
    pub relative: GSBool,
    pub rate: f64,
    pub span: f64,
    pub width: f64,
}
#[test]
fn bindgen_test_layout_GSColumnCompressionTag() {
    assert_eq!(
        ::std::mem::size_of::<GSColumnCompressionTag>(),
        40usize,
        concat!("Size of: ", stringify!(GSColumnCompressionTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSColumnCompressionTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSColumnCompressionTag))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSColumnCompressionTag>())).columnName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSColumnCompressionTag),
            "::",
            stringify!(columnName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSColumnCompressionTag>())).relative as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSColumnCompressionTag),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSColumnCompressionTag>())).rate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GSColumnCompressionTag),
            "::",
            stringify!(rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSColumnCompressionTag>())).span as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GSColumnCompressionTag),
            "::",
            stringify!(span)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSColumnCompressionTag>())).width as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GSColumnCompressionTag),
            "::",
            stringify!(width)
        )
    );
}
pub type GSColumnCompression = GSColumnCompressionTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSCollectionPropertiesTag {
    pub internal: GSCollectionPropertiesTag__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSCollectionPropertiesTag__bindgen_ty_1 {
    pub unused: i8,
}
#[test]
fn bindgen_test_layout_GSCollectionPropertiesTag__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<GSCollectionPropertiesTag__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(GSCollectionPropertiesTag__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GSCollectionPropertiesTag__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(GSCollectionPropertiesTag__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSCollectionPropertiesTag__bindgen_ty_1>())).unused as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSCollectionPropertiesTag__bindgen_ty_1),
            "::",
            stringify!(unused)
        )
    );
}
#[test]
fn bindgen_test_layout_GSCollectionPropertiesTag() {
    assert_eq!(
        ::std::mem::size_of::<GSCollectionPropertiesTag>(),
        1usize,
        concat!("Size of: ", stringify!(GSCollectionPropertiesTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSCollectionPropertiesTag>(),
        1usize,
        concat!("Alignment of ", stringify!(GSCollectionPropertiesTag))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSCollectionPropertiesTag>())).internal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSCollectionPropertiesTag),
            "::",
            stringify!(internal)
        )
    );
}
pub type GSCollectionProperties = GSCollectionPropertiesTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSTimeSeriesPropertiesTag {
    pub rowExpirationTime: i32,
    pub rowExpirationTimeUnit: GSTimeUnit,
    pub compressionWindowSize: i32,
    pub compressionWindowSizeUnit: GSTimeUnit,
    pub compressionMethod: GSCompressionMethod,
    pub compressionListSize: size_t,
    pub compressionList: *mut GSColumnCompression,
    pub expirationDivisionCount: i32,
}
#[test]
fn bindgen_test_layout_GSTimeSeriesPropertiesTag() {
    assert_eq!(
        ::std::mem::size_of::<GSTimeSeriesPropertiesTag>(),
        48usize,
        concat!("Size of: ", stringify!(GSTimeSeriesPropertiesTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSTimeSeriesPropertiesTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSTimeSeriesPropertiesTag))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSTimeSeriesPropertiesTag>())).rowExpirationTime as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTimeSeriesPropertiesTag),
            "::",
            stringify!(rowExpirationTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSTimeSeriesPropertiesTag>())).rowExpirationTimeUnit as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTimeSeriesPropertiesTag),
            "::",
            stringify!(rowExpirationTimeUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSTimeSeriesPropertiesTag>())).compressionWindowSize as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTimeSeriesPropertiesTag),
            "::",
            stringify!(compressionWindowSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSTimeSeriesPropertiesTag>())).compressionWindowSizeUnit
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTimeSeriesPropertiesTag),
            "::",
            stringify!(compressionWindowSizeUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSTimeSeriesPropertiesTag>())).compressionMethod as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTimeSeriesPropertiesTag),
            "::",
            stringify!(compressionMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSTimeSeriesPropertiesTag>())).compressionListSize as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTimeSeriesPropertiesTag),
            "::",
            stringify!(compressionListSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSTimeSeriesPropertiesTag>())).compressionList as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTimeSeriesPropertiesTag),
            "::",
            stringify!(compressionList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSTimeSeriesPropertiesTag>())).expirationDivisionCount
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTimeSeriesPropertiesTag),
            "::",
            stringify!(expirationDivisionCount)
        )
    );
}
pub type GSTimeSeriesProperties = GSTimeSeriesPropertiesTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSColumnInfoTag {
    pub name: *const GSChar,
    pub type_: GSType,
    pub indexTypeFlags: GSIndexTypeFlags,
    pub options: GSTypeOption,
}
#[test]
fn bindgen_test_layout_GSColumnInfoTag() {
    assert_eq!(
        ::std::mem::size_of::<GSColumnInfoTag>(),
        24usize,
        concat!("Size of: ", stringify!(GSColumnInfoTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSColumnInfoTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSColumnInfoTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSColumnInfoTag>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSColumnInfoTag),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSColumnInfoTag>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSColumnInfoTag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSColumnInfoTag>())).indexTypeFlags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GSColumnInfoTag),
            "::",
            stringify!(indexTypeFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSColumnInfoTag>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GSColumnInfoTag),
            "::",
            stringify!(options)
        )
    );
}
pub type GSColumnInfo = GSColumnInfoTag;
pub const GSTriggerTypeTag_GS_TRIGGER_REST: GSTriggerTypeTag = 0;
pub const GSTriggerTypeTag_GS_TRIGGER_JMS: GSTriggerTypeTag = 1;
pub type GSTriggerTypeTag = ::std::os::raw::c_uint;
pub type GSTriggerType = GSEnum;
pub const GSTriggerEventTypeFlagTag_GS_TRIGGER_EVENT_PUT: GSTriggerEventTypeFlagTag = 1;
pub const GSTriggerEventTypeFlagTag_GS_TRIGGER_EVENT_DELETE: GSTriggerEventTypeFlagTag = 2;
pub type GSTriggerEventTypeFlagTag = ::std::os::raw::c_uint;
pub type GSTriggerEventTypeFlags = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSTriggerInfoTag {
    pub name: *const GSChar,
    pub type_: GSTriggerType,
    pub uri: *const GSChar,
    pub eventTypeFlags: GSTriggerEventTypeFlags,
    pub columnSet: *const *const GSChar,
    pub columnCount: size_t,
    pub jmsDestinationType: *const GSChar,
    pub jmsDestinationName: *const GSChar,
    pub user: *const GSChar,
    pub password: *const GSChar,
}
#[test]
fn bindgen_test_layout_GSTriggerInfoTag() {
    assert_eq!(
        ::std::mem::size_of::<GSTriggerInfoTag>(),
        80usize,
        concat!("Size of: ", stringify!(GSTriggerInfoTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSTriggerInfoTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSTriggerInfoTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSTriggerInfoTag>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTriggerInfoTag),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSTriggerInfoTag>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTriggerInfoTag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSTriggerInfoTag>())).uri as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTriggerInfoTag),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSTriggerInfoTag>())).eventTypeFlags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTriggerInfoTag),
            "::",
            stringify!(eventTypeFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSTriggerInfoTag>())).columnSet as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTriggerInfoTag),
            "::",
            stringify!(columnSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSTriggerInfoTag>())).columnCount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTriggerInfoTag),
            "::",
            stringify!(columnCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSTriggerInfoTag>())).jmsDestinationType as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTriggerInfoTag),
            "::",
            stringify!(jmsDestinationType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSTriggerInfoTag>())).jmsDestinationName as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTriggerInfoTag),
            "::",
            stringify!(jmsDestinationName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSTriggerInfoTag>())).user as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTriggerInfoTag),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSTriggerInfoTag>())).password as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTriggerInfoTag),
            "::",
            stringify!(password)
        )
    );
}
pub type GSTriggerInfo = GSTriggerInfoTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSIndexInfoTag {
    pub name: *const GSChar,
    pub type_: GSIndexTypeFlags,
    pub column: i32,
    pub columnName: *const GSChar,
    pub columnCount: size_t,
    pub columnList: *const i32,
    pub columnNameCount: size_t,
    pub columnNameList: *const *const GSChar,
}
#[test]
fn bindgen_test_layout_GSIndexInfoTag() {
    assert_eq!(
        ::std::mem::size_of::<GSIndexInfoTag>(),
        56usize,
        concat!("Size of: ", stringify!(GSIndexInfoTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSIndexInfoTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSIndexInfoTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSIndexInfoTag>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSIndexInfoTag),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSIndexInfoTag>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSIndexInfoTag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSIndexInfoTag>())).column as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GSIndexInfoTag),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSIndexInfoTag>())).columnName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GSIndexInfoTag),
            "::",
            stringify!(columnName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSIndexInfoTag>())).columnCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GSIndexInfoTag),
            "::",
            stringify!(columnCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSIndexInfoTag>())).columnList as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GSIndexInfoTag),
            "::",
            stringify!(columnList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSIndexInfoTag>())).columnNameCount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GSIndexInfoTag),
            "::",
            stringify!(columnNameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSIndexInfoTag>())).columnNameList as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GSIndexInfoTag),
            "::",
            stringify!(columnNameList)
        )
    );
}
pub type GSIndexInfo = GSIndexInfoTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSContainerInfoTag {
    pub name: *const GSChar,
    pub type_: GSContainerType,
    pub columnCount: size_t,
    pub columnInfoList: *const GSColumnInfo,
    pub rowKeyAssigned: GSBool,
    pub columnOrderIgnorable: GSBool,
    pub timeSeriesProperties: *const GSTimeSeriesProperties,
    pub triggerInfoCount: size_t,
    pub triggerInfoList: *const GSTriggerInfo,
    pub dataAffinity: *const GSChar,
    pub indexInfoCount: size_t,
    pub indexInfoList: *const GSIndexInfo,
    pub rowKeyColumnCount: size_t,
    pub rowKeyColumnList: *const i32,
}
#[test]
fn bindgen_test_layout_GSContainerInfoTag() {
    assert_eq!(
        ::std::mem::size_of::<GSContainerInfoTag>(),
        104usize,
        concat!("Size of: ", stringify!(GSContainerInfoTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSContainerInfoTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSContainerInfoTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSContainerInfoTag>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSContainerInfoTag>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSContainerInfoTag>())).columnCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(columnCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSContainerInfoTag>())).columnInfoList as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(columnInfoList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSContainerInfoTag>())).rowKeyAssigned as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(rowKeyAssigned)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSContainerInfoTag>())).columnOrderIgnorable as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(columnOrderIgnorable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSContainerInfoTag>())).timeSeriesProperties as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(timeSeriesProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSContainerInfoTag>())).triggerInfoCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(triggerInfoCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSContainerInfoTag>())).triggerInfoList as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(triggerInfoList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSContainerInfoTag>())).dataAffinity as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(dataAffinity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSContainerInfoTag>())).indexInfoCount as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(indexInfoCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSContainerInfoTag>())).indexInfoList as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(indexInfoList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSContainerInfoTag>())).rowKeyColumnCount as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(rowKeyColumnCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSContainerInfoTag>())).rowKeyColumnList as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerInfoTag),
            "::",
            stringify!(rowKeyColumnList)
        )
    );
}
pub type GSContainerInfo = GSContainerInfoTag;
pub type GSBindingGetterFunc = ::std::option::Option<unsafe extern "C" fn() -> *const GSBindingTag>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSBindingEntryTag {
    pub columnName: *const GSChar,
    pub elementType: GSType,
    pub offset: size_t,
    pub arraySizeOffset: size_t,
    pub options: GSTypeOption,
    pub keyBinding: *const GSBindingTag,
    pub keyBindingGetter: GSBindingGetterFunc,
}
#[test]
fn bindgen_test_layout_GSBindingEntryTag() {
    assert_eq!(
        ::std::mem::size_of::<GSBindingEntryTag>(),
        56usize,
        concat!("Size of: ", stringify!(GSBindingEntryTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSBindingEntryTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSBindingEntryTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSBindingEntryTag>())).columnName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSBindingEntryTag),
            "::",
            stringify!(columnName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSBindingEntryTag>())).elementType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSBindingEntryTag),
            "::",
            stringify!(elementType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSBindingEntryTag>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GSBindingEntryTag),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSBindingEntryTag>())).arraySizeOffset as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GSBindingEntryTag),
            "::",
            stringify!(arraySizeOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSBindingEntryTag>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GSBindingEntryTag),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSBindingEntryTag>())).keyBinding as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GSBindingEntryTag),
            "::",
            stringify!(keyBinding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSBindingEntryTag>())).keyBindingGetter as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GSBindingEntryTag),
            "::",
            stringify!(keyBindingGetter)
        )
    );
}
pub type GSBindingEntry = GSBindingEntryTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSBindingTag {
    pub entries: *mut GSBindingEntry,
    pub entryCount: size_t,
}
#[test]
fn bindgen_test_layout_GSBindingTag() {
    assert_eq!(
        ::std::mem::size_of::<GSBindingTag>(),
        16usize,
        concat!("Size of: ", stringify!(GSBindingTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSBindingTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSBindingTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSBindingTag>())).entries as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSBindingTag),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSBindingTag>())).entryCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSBindingTag),
            "::",
            stringify!(entryCount)
        )
    );
}
pub type GSBinding = GSBindingTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSQueryAnalysisEntryTag {
    pub id: i32,
    pub depth: i32,
    pub type_: *const GSChar,
    pub valueType: *const GSChar,
    pub value: *const GSChar,
    pub statement: *const GSChar,
}
#[test]
fn bindgen_test_layout_GSQueryAnalysisEntryTag() {
    assert_eq!(
        ::std::mem::size_of::<GSQueryAnalysisEntryTag>(),
        40usize,
        concat!("Size of: ", stringify!(GSQueryAnalysisEntryTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSQueryAnalysisEntryTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSQueryAnalysisEntryTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSQueryAnalysisEntryTag>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSQueryAnalysisEntryTag),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSQueryAnalysisEntryTag>())).depth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GSQueryAnalysisEntryTag),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSQueryAnalysisEntryTag>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSQueryAnalysisEntryTag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSQueryAnalysisEntryTag>())).valueType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GSQueryAnalysisEntryTag),
            "::",
            stringify!(valueType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSQueryAnalysisEntryTag>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GSQueryAnalysisEntryTag),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSQueryAnalysisEntryTag>())).statement as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GSQueryAnalysisEntryTag),
            "::",
            stringify!(statement)
        )
    );
}
pub type GSQueryAnalysisEntry = GSQueryAnalysisEntryTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSContainerRowEntryTag {
    pub containerName: *const GSChar,
    pub rowList: *const *mut ::std::os::raw::c_void,
    pub rowCount: size_t,
}
#[test]
fn bindgen_test_layout_GSContainerRowEntryTag() {
    assert_eq!(
        ::std::mem::size_of::<GSContainerRowEntryTag>(),
        24usize,
        concat!("Size of: ", stringify!(GSContainerRowEntryTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSContainerRowEntryTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSContainerRowEntryTag))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSContainerRowEntryTag>())).containerName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerRowEntryTag),
            "::",
            stringify!(containerName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSContainerRowEntryTag>())).rowList as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerRowEntryTag),
            "::",
            stringify!(rowList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSContainerRowEntryTag>())).rowCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GSContainerRowEntryTag),
            "::",
            stringify!(rowCount)
        )
    );
}
pub type GSContainerRowEntry = GSContainerRowEntryTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSRowKeyPredicateEntryTag {
    pub containerName: *const GSChar,
    pub predicate: *mut GSRowKeyPredicate,
}
#[test]
fn bindgen_test_layout_GSRowKeyPredicateEntryTag() {
    assert_eq!(
        ::std::mem::size_of::<GSRowKeyPredicateEntryTag>(),
        16usize,
        concat!("Size of: ", stringify!(GSRowKeyPredicateEntryTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSRowKeyPredicateEntryTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSRowKeyPredicateEntryTag))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSRowKeyPredicateEntryTag>())).containerName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSRowKeyPredicateEntryTag),
            "::",
            stringify!(containerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSRowKeyPredicateEntryTag>())).predicate as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSRowKeyPredicateEntryTag),
            "::",
            stringify!(predicate)
        )
    );
}
pub type GSRowKeyPredicateEntry = GSRowKeyPredicateEntryTag;
#[repr(C)]
#[derive(Copy, Clone)]
pub union GSValueTag {
    pub asString: *const GSChar,
    pub asBool: GSBool,
    pub asByte: i8,
    pub asShort: i16,
    pub asInteger: i32,
    pub asLong: i64,
    pub asFloat: f32,
    pub asDouble: f64,
    pub asTimestamp: GSTimestamp,
    pub asGeometry: *const GSChar,
    pub asBlob: GSBlob,
    pub asArray: GSValueTag__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GSValueTag__bindgen_ty_1 {
    pub length: size_t,
    pub elements: GSValueTag__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union GSValueTag__bindgen_ty_1__bindgen_ty_1 {
    pub data: *const ::std::os::raw::c_void,
    pub asString: *const *const GSChar,
    pub asBool: *const GSBool,
    pub asByte: *const i8,
    pub asShort: *const i16,
    pub asInteger: *const i32,
    pub asLong: *const i64,
    pub asFloat: *const f32,
    pub asDouble: *const f64,
    pub asTimestamp: *const GSTimestamp,
}
#[test]
fn bindgen_test_layout_GSValueTag__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<GSValueTag__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GSValueTag__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1__bindgen_ty_1>())).data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1__bindgen_ty_1>())).asString as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(asString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1__bindgen_ty_1>())).asBool as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(asBool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1__bindgen_ty_1>())).asByte as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(asByte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1__bindgen_ty_1>())).asShort as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(asShort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1__bindgen_ty_1>())).asInteger as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(asInteger)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1__bindgen_ty_1>())).asLong as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(asLong)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1__bindgen_ty_1>())).asFloat as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(asFloat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1__bindgen_ty_1>())).asDouble as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(asDouble)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1__bindgen_ty_1>())).asTimestamp
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(asTimestamp)
        )
    );
}
#[test]
fn bindgen_test_layout_GSValueTag__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<GSValueTag__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(GSValueTag__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<GSValueTag__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(GSValueTag__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSValueTag__bindgen_ty_1>())).elements as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag__bindgen_ty_1),
            "::",
            stringify!(elements)
        )
    );
}
#[test]
fn bindgen_test_layout_GSValueTag() {
    assert_eq!(
        ::std::mem::size_of::<GSValueTag>(),
        16usize,
        concat!("Size of: ", stringify!(GSValueTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSValueTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSValueTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asString as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asBool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asBool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asByte as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asByte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asShort as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asShort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asInteger as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asInteger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asLong as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asLong)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asFloat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asFloat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asDouble as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asDouble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asTimestamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asTimestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asGeometry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asGeometry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asBlob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asBlob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSValueTag>())).asArray as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSValueTag),
            "::",
            stringify!(asArray)
        )
    );
}
pub type GSValue = GSValueTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSTimeZoneTag {
    pub internalData: GSTimeZoneTag__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSTimeZoneTag__bindgen_ty_1 {
    pub offsetMillis: i64,
}
#[test]
fn bindgen_test_layout_GSTimeZoneTag__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<GSTimeZoneTag__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(GSTimeZoneTag__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<GSTimeZoneTag__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(GSTimeZoneTag__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GSTimeZoneTag__bindgen_ty_1>())).offsetMillis as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTimeZoneTag__bindgen_ty_1),
            "::",
            stringify!(offsetMillis)
        )
    );
}
#[test]
fn bindgen_test_layout_GSTimeZoneTag() {
    assert_eq!(
        ::std::mem::size_of::<GSTimeZoneTag>(),
        8usize,
        concat!("Size of: ", stringify!(GSTimeZoneTag))
    );
    assert_eq!(
        ::std::mem::align_of::<GSTimeZoneTag>(),
        8usize,
        concat!("Alignment of ", stringify!(GSTimeZoneTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GSTimeZoneTag>())).internalData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GSTimeZoneTag),
            "::",
            stringify!(internalData)
        )
    );
}
pub type GSTimeZone = GSTimeZoneTag;
extern "C" {
    pub fn gsCloseFactory(factory: *mut *mut GSGridStoreFactory, allRelated: GSBool);
}
extern "C" {
    pub fn gsGetDefaultFactory() -> *mut GSGridStoreFactory;
}
extern "C" {
    pub fn gsGetGridStore(
        factory: *mut GSGridStoreFactory,
        properties: *const GSPropertyEntry,
        propertyCount: size_t,
        store: *mut *mut GSGridStore,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCompatibleFunc_GetGridStore1(
        factory: *mut GSGridStoreFactory,
        properties: *const GSPropertyEntry,
        store: *mut *mut GSGridStore,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetFactoryProperties(
        factory: *mut GSGridStoreFactory,
        properties: *const GSPropertyEntry,
        propertyCount: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCompatibleFunc_SetFactoryProperties1(
        factory: *mut GSGridStoreFactory,
        properties: *const GSPropertyEntry,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCloseGridStore(store: *mut *mut GSGridStore, allRelated: GSBool);
}
extern "C" {
    pub fn gsDropCollection(store: *mut GSGridStore, name: *const GSChar) -> GSResult;
}
extern "C" {
    pub fn gsDropTimeSeries(store: *mut GSGridStore, name: *const GSChar) -> GSResult;
}
extern "C" {
    pub fn gsGetRowByPath(
        store: *mut GSGridStore,
        pathKey: *const GSChar,
        rowObj: *mut ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetCollectionV4_3(
        store: *mut GSGridStore,
        name: *const GSChar,
        binding: *const GSBinding,
        collection: *mut *mut GSCollection,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetContainerInfoV4_3(
        store: *mut GSGridStore,
        name: *const GSChar,
        info: *mut GSContainerInfo,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetTimeSeriesV4_3(
        store: *mut GSGridStore,
        name: *const GSChar,
        binding: *const GSBinding,
        timeSeries: *mut *mut GSTimeSeries,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutRowByPath(
        store: *mut GSGridStore,
        pathKey: *const GSChar,
        rowObj: *const ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutContainerV4_3(
        store: *mut GSGridStore,
        name: *const GSChar,
        binding: *const GSBinding,
        info: *const GSContainerInfo,
        modifiable: GSBool,
        container: *mut *mut GSContainer,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutCollectionV4_3(
        store: *mut GSGridStore,
        name: *const GSChar,
        binding: *const GSBinding,
        properties: *const GSCollectionProperties,
        modifiable: GSBool,
        collection: *mut *mut GSCollection,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutTimeSeriesV4_3(
        store: *mut GSGridStore,
        name: *const GSChar,
        binding: *const GSBinding,
        properties: *const GSTimeSeriesProperties,
        modifiable: GSBool,
        timeSeries: *mut *mut GSTimeSeries,
    ) -> GSResult;
}
extern "C" {
    pub fn gsRemoveRowByPath(
        store: *mut GSGridStore,
        pathKey: *const GSChar,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsDeleteRowByPath(
        store: *mut GSGridStore,
        pathKey: *const GSChar,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutContainerGeneralV4_3(
        store: *mut GSGridStore,
        name: *const GSChar,
        info: *const GSContainerInfo,
        modifiable: GSBool,
        container: *mut *mut GSContainer,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetContainerGeneral(
        store: *mut GSGridStore,
        name: *const GSChar,
        container: *mut *mut GSContainer,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutCollectionGeneralV4_3(
        store: *mut GSGridStore,
        name: *const GSChar,
        info: *const GSContainerInfo,
        modifiable: GSBool,
        container: *mut *mut GSContainer,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetCollectionGeneral(
        store: *mut GSGridStore,
        name: *const GSChar,
        collection: *mut *mut GSCollection,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutTimeSeriesGeneralV4_3(
        store: *mut GSGridStore,
        name: *const GSChar,
        info: *const GSContainerInfo,
        modifiable: GSBool,
        timeSeries: *mut *mut GSTimeSeries,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetTimeSeriesGeneral(
        store: *mut GSGridStore,
        name: *const GSChar,
        timeSeries: *mut *mut GSTimeSeries,
    ) -> GSResult;
}
extern "C" {
    pub fn gsDropContainer(store: *mut GSGridStore, name: *const GSChar) -> GSResult;
}
extern "C" {
    pub fn gsCreateRowByStoreV4_3(
        store: *mut GSGridStore,
        info: *const GSContainerInfo,
        row: *mut *mut GSRow,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCreateRowKeyByStore(
        store: *mut GSGridStore,
        info: *const GSContainerInfo,
        key: *mut *mut GSRowKey,
    ) -> GSResult;
}
extern "C" {
    pub fn gsFetchAll(
        store: *mut GSGridStore,
        queryList: *const *mut GSQuery,
        queryCount: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutMultipleContainerRows(
        store: *mut GSGridStore,
        entryList: *const GSContainerRowEntry,
        entryCount: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetMultipleContainerRows(
        store: *mut GSGridStore,
        predicateList: *const *const GSRowKeyPredicateEntry,
        predicateCount: size_t,
        entryList: *mut *const GSContainerRowEntry,
        entryCount: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPartitionController(
        store: *mut GSGridStore,
        partitionController: *mut *mut GSPartitionController,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCreateRowKeyPredicate(
        store: *mut GSGridStore,
        keyType: GSType,
        predicate: *mut *mut GSRowKeyPredicate,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCreateRowKeyPredicateGeneral(
        store: *mut GSGridStore,
        info: *const GSContainerInfo,
        predicate: *mut *mut GSRowKeyPredicate,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCloseContainer(container: *mut *mut GSContainer, allRelated: GSBool);
}
extern "C" {
    pub fn gsCreateEventNotification(container: *mut GSContainer, url: *const GSChar) -> GSResult;
}
extern "C" {
    pub fn gsCreateTrigger(container: *mut GSContainer, info: *const GSTriggerInfo) -> GSResult;
}
extern "C" {
    pub fn gsCreateIndex(
        container: *mut GSContainer,
        columnName: *const GSChar,
        flags: GSIndexTypeFlags,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCreateIndexDetailV4_3(
        container: *mut GSContainer,
        info: *const GSIndexInfo,
    ) -> GSResult;
}
extern "C" {
    pub fn gsDropEventNotification(container: *mut GSContainer, url: *const GSChar) -> GSResult;
}
extern "C" {
    pub fn gsDropTrigger(container: *mut GSContainer, name: *const GSChar) -> GSResult;
}
extern "C" {
    pub fn gsDropIndex(
        container: *mut GSContainer,
        columnName: *const GSChar,
        flags: GSIndexTypeFlags,
    ) -> GSResult;
}
extern "C" {
    pub fn gsDropIndexDetailV4_3(container: *mut GSContainer, info: *const GSIndexInfo)
        -> GSResult;
}
extern "C" {
    pub fn gsFlush(container: *mut GSContainer) -> GSResult;
}
extern "C" {
    pub fn gsGetRow(
        container: *mut GSContainer,
        key: *const ::std::os::raw::c_void,
        rowObj: *mut ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutRow(
        container: *mut GSContainer,
        key: *const ::std::os::raw::c_void,
        rowObj: *const ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutMultipleRows(
        container: *mut GSContainer,
        rowObjs: *const *const ::std::os::raw::c_void,
        rowCount: size_t,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCompatibleFunc_PutMultipleRows1(
        container: *mut GSContainer,
        rowCount: size_t,
        rowObjs: *const *const ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsQuery(
        container: *mut GSContainer,
        queryString: *const GSChar,
        query: *mut *mut GSQuery,
    ) -> GSResult;
}
extern "C" {
    pub fn gsRemoveRow(
        container: *mut GSContainer,
        key: *const ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsDeleteRow(
        container: *mut GSContainer,
        key: *const ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetContainerType(container: *mut GSContainer, type_: *mut GSContainerType)
        -> GSResult;
}
extern "C" {
    pub fn gsCreateRowByContainer(container: *mut GSContainer, row: *mut *mut GSRow) -> GSResult;
}
extern "C" {
    pub fn gsAbort(container: *mut GSContainer) -> GSResult;
}
extern "C" {
    pub fn gsCommit(container: *mut GSContainer) -> GSResult;
}
extern "C" {
    pub fn gsGetRowForUpdate(
        container: *mut GSContainer,
        key: *const ::std::os::raw::c_void,
        rowObj: *mut ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetAutoCommit(container: *mut GSContainer, enabled: GSBool) -> GSResult;
}
extern "C" {
    pub fn gsGetRowByInteger(
        container: *mut GSContainer,
        key: i32,
        rowObj: *mut ::std::os::raw::c_void,
        forUpdate: GSBool,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowByLong(
        container: *mut GSContainer,
        key: i64,
        rowObj: *mut ::std::os::raw::c_void,
        forUpdate: GSBool,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowByTimestamp(
        container: *mut GSContainer,
        key: GSTimestamp,
        rowObj: *mut ::std::os::raw::c_void,
        forUpdate: GSBool,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowByString(
        container: *mut GSContainer,
        key: *const GSChar,
        rowObj: *mut ::std::os::raw::c_void,
        forUpdate: GSBool,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutRowByInteger(
        container: *mut GSContainer,
        key: i32,
        rowObj: *const ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutRowByLong(
        container: *mut GSContainer,
        key: i64,
        rowObj: *const ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutRowByTimestamp(
        container: *mut GSContainer,
        key: GSTimestamp,
        rowObj: *const ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutRowByString(
        container: *mut GSContainer,
        key: *const GSChar,
        rowObj: *const ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsRemoveRowByInteger(
        container: *mut GSContainer,
        key: i32,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsRemoveRowByLong(
        container: *mut GSContainer,
        key: i64,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsRemoveRowByTimestamp(
        container: *mut GSContainer,
        key: GSTimestamp,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsRemoveRowByString(
        container: *mut GSContainer,
        key: *const GSChar,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsDeleteRowByInteger(
        container: *mut GSContainer,
        key: i32,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsDeleteRowByLong(
        container: *mut GSContainer,
        key: i64,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsDeleteRowByTimestamp(
        container: *mut GSContainer,
        key: GSTimestamp,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsDeleteRowByString(
        container: *mut GSContainer,
        key: *const GSChar,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowGeneral(
        container: *mut GSContainer,
        keyObj: *mut GSRowKey,
        rowObj: *mut GSRow,
        forUpdate: GSBool,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsPutRowGeneral(
        container: *mut GSContainer,
        keyObj: *mut GSRowKey,
        rowObj: *mut GSRow,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsDeleteRowGeneral(
        container: *mut GSContainer,
        keyObj: *mut GSRowKey,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsQueryByGeometry(
        collection: *mut GSCollection,
        column: *const GSChar,
        geometry: *const GSChar,
        geometryOp: GSGeometryOperator,
        query: *mut *mut GSQuery,
    ) -> GSResult;
}
extern "C" {
    pub fn gsQueryByGeometryWithDisjointCondition(
        collection: *mut GSCollection,
        column: *const GSChar,
        geometryIntersection: *const GSChar,
        geometryDisjoint: *const GSChar,
        query: *mut *mut GSQuery,
    ) -> GSResult;
}
extern "C" {
    pub fn gsQueryByGeometryWithExclusion(
        collection: *mut GSCollection,
        column: *const GSChar,
        geometryIntersection: *const GSChar,
        geometryDisjoint: *const GSChar,
        query: *mut *mut GSQuery,
    ) -> GSResult;
}
extern "C" {
    pub fn gsAggregateTimeSeries(
        timeSeries: *mut GSTimeSeries,
        start: GSTimestamp,
        end: GSTimestamp,
        column: *const GSChar,
        aggregation: GSAggregation,
        aggregationResult: *mut *mut GSAggregationResult,
    ) -> GSResult;
}
extern "C" {
    pub fn gsAppendTimeSeriesRow(
        timeSeries: *mut GSTimeSeries,
        rowObj: *const ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowByBaseTime(
        timeSeries: *mut GSTimeSeries,
        base: GSTimestamp,
        timeOp: GSTimeOperator,
        rowObj: *mut ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsInterpolateTimeSeriesRow(
        timeSeries: *mut GSTimeSeries,
        base: GSTimestamp,
        column: *const GSChar,
        rowObj: *mut ::std::os::raw::c_void,
        exists: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsQueryByTimeSeriesRange(
        timeSeries: *mut GSTimeSeries,
        start: GSTimestamp,
        end: GSTimestamp,
        query: *mut *mut GSQuery,
    ) -> GSResult;
}
extern "C" {
    pub fn gsQueryByTimeSeriesOrderedRange(
        timeSeries: *mut GSTimeSeries,
        start: *const GSTimestamp,
        end: *const GSTimestamp,
        order: GSQueryOrder,
        query: *mut *mut GSQuery,
    ) -> GSResult;
}
extern "C" {
    pub fn gsQueryByTimeSeriesSampling(
        timeSeries: *mut GSTimeSeries,
        start: GSTimestamp,
        end: GSTimestamp,
        columnSet: *const *const GSChar,
        columnCount: size_t,
        mode: GSInterpolationMode,
        interval: i32,
        intervalUnit: GSTimeUnit,
        query: *mut *mut GSQuery,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCompatibleFunc_QueryByTimeSeriesSampling1(
        timeSeries: *mut GSTimeSeries,
        start: GSTimestamp,
        end: GSTimestamp,
        columnSet: *const *const GSChar,
        interval: i32,
        intervalUnit: GSTimeUnit,
        query: *mut *mut GSQuery,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCloseRow(row: *mut *mut GSRow);
}
extern "C" {
    pub fn gsGetRowSchemaV4_3(row: *mut GSRow, schemaInfo: *mut GSContainerInfo) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldGeneral(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const GSValue,
        type_: GSType,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldGeneral(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut GSValue,
        type_: *mut GSType,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldNull(row: *mut GSRow, column: i32) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldNull(row: *mut GSRow, column: i32, nullValue: *mut GSBool) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByString(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const GSChar,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsString(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut *const GSChar,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByBool(row: *mut GSRow, column: i32, fieldValue: GSBool) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsBool(row: *mut GSRow, column: i32, fieldValue: *mut GSBool) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByByte(row: *mut GSRow, column: i32, fieldValue: i8) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsByte(row: *mut GSRow, column: i32, fieldValue: *mut i8) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByShort(row: *mut GSRow, column: i32, fieldValue: i16) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsShort(row: *mut GSRow, column: i32, fieldValue: *mut i16) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByInteger(row: *mut GSRow, column: i32, fieldValue: i32) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsInteger(row: *mut GSRow, column: i32, fieldValue: *mut i32) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByLong(row: *mut GSRow, column: i32, fieldValue: i64) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsLong(row: *mut GSRow, column: i32, fieldValue: *mut i64) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByFloat(row: *mut GSRow, column: i32, fieldValue: f32) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsFloat(row: *mut GSRow, column: i32, fieldValue: *mut f32) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByDouble(row: *mut GSRow, column: i32, fieldValue: f64) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsDouble(row: *mut GSRow, column: i32, fieldValue: *mut f64) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByTimestamp(
        row: *mut GSRow,
        column: i32,
        fieldValue: GSTimestamp,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsTimestamp(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut GSTimestamp,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByGeometry(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const GSChar,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsGeometry(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut *const GSChar,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByBlob(row: *mut GSRow, column: i32, fieldValue: *const GSBlob)
        -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsBlob(row: *mut GSRow, column: i32, fieldValue: *mut GSBlob) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByStringArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const *const GSChar,
        size: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsStringArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut *const *const GSChar,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByBoolArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const GSBool,
        size: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsBoolArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut *const GSBool,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByByteArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const i8,
        size: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsByteArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut *const i8,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByShortArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const i16,
        size: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsShortArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut *const i16,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByIntegerArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const i32,
        size: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsIntegerArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut *const i32,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByLongArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const i64,
        size: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsLongArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut *const i64,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByFloatArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const f32,
        size: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsFloatArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut *const f32,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByDoubleArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const f64,
        size: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsDoubleArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut *const f64,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetRowFieldByTimestampArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *const GSTimestamp,
        size: size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowFieldAsTimestampArray(
        row: *mut GSRow,
        column: i32,
        fieldValue: *mut *const GSTimestamp,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCreateRowByRow(row: *mut GSRow, destRow: *mut *mut GSRow) -> GSResult;
}
extern "C" {
    pub fn gsCreateRowKeyByRow(row: *mut GSRow, key: *mut *mut GSRowKey) -> GSResult;
}
extern "C" {
    pub fn gsCloseQuery(query: *mut *mut GSQuery);
}
extern "C" {
    pub fn gsFetch(query: *mut GSQuery, forUpdate: GSBool, rowSet: *mut *mut GSRowSet) -> GSResult;
}
extern "C" {
    pub fn gsSetFetchOption(
        query: *mut GSQuery,
        fetchOption: GSFetchOption,
        value: *const ::std::os::raw::c_void,
        valueType: GSType,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowSet(query: *mut GSQuery, rowSet: *mut *mut GSRowSet) -> GSResult;
}
extern "C" {
    pub fn gsCloseRowSet(rowSet: *mut *mut GSRowSet);
}
extern "C" {
    pub fn gsDeleteCurrentRow(rowSet: *mut GSRowSet) -> GSResult;
}
extern "C" {
    pub fn gsGetNextRow(rowSet: *mut GSRowSet, rowObj: *mut ::std::os::raw::c_void) -> GSResult;
}
extern "C" {
    pub fn gsGetNextAggregation(
        rowSet: *mut GSRowSet,
        aggregationResult: *mut *mut GSAggregationResult,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetNextQueryAnalysis(
        rowSet: *mut GSRowSet,
        queryAnalysis: *mut GSQueryAnalysisEntry,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetRowSetType(rowSet: *mut GSRowSet) -> GSRowSetType;
}
extern "C" {
    pub fn gsGetRowSetSize(rowSet: *mut GSRowSet) -> i32;
}
extern "C" {
    pub fn gsHasNextRow(rowSet: *mut GSRowSet) -> GSBool;
}
extern "C" {
    pub fn gsUpdateCurrentRow(
        rowSet: *mut GSRowSet,
        rowObj: *const ::std::os::raw::c_void,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCloseAggregationResult(aggregationResult: *mut *mut GSAggregationResult);
}
extern "C" {
    pub fn gsGetAggregationValue(
        aggregationResult: *mut GSAggregationResult,
        value: *mut ::std::os::raw::c_void,
        valueType: GSType,
    ) -> GSBool;
}
extern "C" {
    pub fn gsGetAggregationValueAsLong(
        aggregationResult: *mut GSAggregationResult,
        value: *mut i64,
        assigned: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetAggregationValueAsDouble(
        aggregationResult: *mut GSAggregationResult,
        value: *mut f64,
        assigned: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetAggregationValueAsTimestamp(
        aggregationResult: *mut GSAggregationResult,
        value: *mut GSTimestamp,
        assigned: *mut GSBool,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCloseRowKeyPredicate(predicate: *mut *mut GSRowKeyPredicate);
}
extern "C" {
    pub fn gsGetPredicateKeyType(
        predicate: *mut GSRowKeyPredicate,
        keyType: *mut GSType,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateKeySchema(
        predicate: *mut GSRowKeyPredicate,
        info: *mut GSContainerInfo,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateStartGeneralKey(
        predicate: *mut GSRowKeyPredicate,
        keyObj: *mut *mut GSRowKey,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateStartKeyGeneral(
        predicate: *mut GSRowKeyPredicate,
        startKey: *mut *const GSValue,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateStartKeyAsString(
        predicate: *mut GSRowKeyPredicate,
        startKey: *mut *const GSChar,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateStartKeyAsInteger(
        predicate: *mut GSRowKeyPredicate,
        startKey: *mut *const i32,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateStartKeyAsLong(
        predicate: *mut GSRowKeyPredicate,
        startKey: *mut *const i64,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateStartKeyAsTimestamp(
        predicate: *mut GSRowKeyPredicate,
        startKey: *mut *const GSTimestamp,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateFinishGeneralKey(
        predicate: *mut GSRowKeyPredicate,
        keyObj: *mut *mut GSRowKey,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateFinishKeyGeneral(
        predicate: *mut GSRowKeyPredicate,
        finishKey: *mut *const GSValue,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateFinishKeyAsString(
        predicate: *mut GSRowKeyPredicate,
        finishKey: *mut *const GSChar,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateFinishKeyAsInteger(
        predicate: *mut GSRowKeyPredicate,
        finishKey: *mut *const i32,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateFinishKeyAsLong(
        predicate: *mut GSRowKeyPredicate,
        finishKey: *mut *const i64,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateFinishKeyAsTimestamp(
        predicate: *mut GSRowKeyPredicate,
        finishKey: *mut *const GSTimestamp,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateDistinctGeneralKeys(
        predicate: *mut GSRowKeyPredicate,
        keyObjList: *mut *const *mut GSRowKey,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateDistinctKeysGeneral(
        predicate: *mut GSRowKeyPredicate,
        keyList: *mut *const GSValue,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateDistinctKeysAsString(
        predicate: *mut GSRowKeyPredicate,
        keyList: *mut *const *const GSChar,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateDistinctKeysAsInteger(
        predicate: *mut GSRowKeyPredicate,
        keyList: *mut *const i32,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateDistinctKeysAsLong(
        predicate: *mut GSRowKeyPredicate,
        keyList: *mut *const i64,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPredicateDistinctKeysAsTimestamp(
        predicate: *mut GSRowKeyPredicate,
        keyList: *mut *const GSTimestamp,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateStartGeneralKey(
        predicate: *mut GSRowKeyPredicate,
        keyObj: *mut GSRowKey,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateStartKeyGeneral(
        predicate: *mut GSRowKeyPredicate,
        startKey: *const GSValue,
        keyType: GSType,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateStartKeyByString(
        predicate: *mut GSRowKeyPredicate,
        startKey: *const GSChar,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateStartKeyByInteger(
        predicate: *mut GSRowKeyPredicate,
        startKey: *const i32,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateStartKeyByLong(
        predicate: *mut GSRowKeyPredicate,
        startKey: *const i64,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateStartKeyByTimestamp(
        predicate: *mut GSRowKeyPredicate,
        startKey: *const GSTimestamp,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateFinishGeneralKey(
        predicate: *mut GSRowKeyPredicate,
        keyObj: *mut GSRowKey,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateFinishKeyGeneral(
        predicate: *mut GSRowKeyPredicate,
        finishKey: *const GSValue,
        keyType: GSType,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateFinishKeyByString(
        predicate: *mut GSRowKeyPredicate,
        finishKey: *const GSChar,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateFinishKeyByInteger(
        predicate: *mut GSRowKeyPredicate,
        finishKey: *const i32,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateFinishKeyByLong(
        predicate: *mut GSRowKeyPredicate,
        finishKey: *const i64,
    ) -> GSResult;
}
extern "C" {
    pub fn gsSetPredicateFinishKeyByTimestamp(
        predicate: *mut GSRowKeyPredicate,
        finishKey: *const GSTimestamp,
    ) -> GSResult;
}
extern "C" {
    pub fn gsAddPredicateGeneralKey(
        predicate: *mut GSRowKeyPredicate,
        keyObj: *mut GSRowKey,
    ) -> GSResult;
}
extern "C" {
    pub fn gsAddPredicateKeyGeneral(
        predicate: *mut GSRowKeyPredicate,
        key: *const GSValue,
        keyType: GSType,
    ) -> GSResult;
}
extern "C" {
    pub fn gsAddPredicateKeyByString(
        predicate: *mut GSRowKeyPredicate,
        key: *const GSChar,
    ) -> GSResult;
}
extern "C" {
    pub fn gsAddPredicateKeyByInteger(predicate: *mut GSRowKeyPredicate, key: i32) -> GSResult;
}
extern "C" {
    pub fn gsAddPredicateKeyByLong(predicate: *mut GSRowKeyPredicate, key: i64) -> GSResult;
}
extern "C" {
    pub fn gsAddPredicateKeyByTimestamp(
        predicate: *mut GSRowKeyPredicate,
        key: GSTimestamp,
    ) -> GSResult;
}
extern "C" {
    pub fn gsClosePartitionController(controller: *mut *mut GSPartitionController);
}
extern "C" {
    pub fn gsGetPartitionCount(
        controller: *mut GSPartitionController,
        partitionCount: *mut i32,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPartitionContainerCount(
        controller: *mut GSPartitionController,
        partitionIndex: i32,
        containerCount: *mut i64,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPartitionContainerNames(
        controller: *mut GSPartitionController,
        partitionIndex: i32,
        start: i64,
        limit: *const i64,
        nameList: *mut *const *const GSChar,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPartitionHosts(
        controller: *mut GSPartitionController,
        partitionIndex: i32,
        addressList: *mut *const *const GSChar,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPartitionOwnerHost(
        controller: *mut GSPartitionController,
        partitionIndex: i32,
        address: *mut *const GSChar,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPartitionBackupHosts(
        controller: *mut GSPartitionController,
        partitionIndex: i32,
        addressList: *mut *const *const GSChar,
        size: *mut size_t,
    ) -> GSResult;
}
extern "C" {
    pub fn gsAssignPartitionPreferableHost(
        controller: *mut GSPartitionController,
        partitionIndex: i32,
        host: *const GSChar,
    ) -> GSResult;
}
extern "C" {
    pub fn gsGetPartitionIndexOfContainer(
        controller: *mut GSPartitionController,
        containerName: *const GSChar,
        partitionIndex: *mut i32,
    ) -> GSResult;
}
extern "C" {
    pub fn gsCurrentTime() -> GSTimestamp;
}
extern "C" {
    pub fn gsGetTimeField(timestamp: GSTimestamp, timeUnit: GSTimeUnit) -> i64;
}
extern "C" {
    pub fn gsGetZonedTimeField(
        timestamp: GSTimestamp,
        timeUnit: GSTimeUnit,
        zone: *const GSTimeZone,
    ) -> i64;
}
extern "C" {
    pub fn gsSetTimeField(timestamp: *mut GSTimestamp, field: i64, timeUnit: GSTimeUnit) -> GSBool;
}
extern "C" {
    pub fn gsSetZonedTimeField(
        timestamp: *mut GSTimestamp,
        field: i64,
        timeUnit: GSTimeUnit,
        zone: *const GSTimeZone,
    ) -> GSBool;
}
extern "C" {
    pub fn gsAddTimeV4_3(timestamp: GSTimestamp, amount: i64, timeUnit: GSTimeUnit) -> GSTimestamp;
}
extern "C" {
    pub fn gsAddZonedTime(
        timestamp: GSTimestamp,
        amount: i64,
        timeUnit: GSTimeUnit,
        zone: *const GSTimeZone,
    ) -> GSTimestamp;
}
extern "C" {
    pub fn gsGetTimeDiff(
        timestamp1: GSTimestamp,
        timestamp2: GSTimestamp,
        timeUnit: GSTimeUnit,
    ) -> i64;
}
extern "C" {
    pub fn gsGetZonedTimeDiff(
        timestamp1: GSTimestamp,
        timestamp2: GSTimestamp,
        timeUnit: GSTimeUnit,
        zone: *const GSTimeZone,
    ) -> i64;
}
extern "C" {
    pub fn gsFormatTime(timestamp: GSTimestamp, strBuf: *mut GSChar, bufSize: size_t) -> size_t;
}
extern "C" {
    pub fn gsFormatZonedTime(
        timestamp: GSTimestamp,
        strBuf: *mut GSChar,
        bufSize: size_t,
        zone: *const GSTimeZone,
    ) -> size_t;
}
extern "C" {
    pub fn gsParseTime(str_: *const GSChar, timestamp: *mut GSTimestamp) -> GSBool;
}
extern "C" {
    pub fn gsGetTimeZoneOffset(zone: *const GSTimeZone, timeUnit: GSTimeUnit) -> i64;
}
extern "C" {
    pub fn gsSetTimeZoneOffset(zone: *mut GSTimeZone, offset: i64, timeUnit: GSTimeUnit) -> GSBool;
}
extern "C" {
    pub fn gsFormatTimeZone(
        zone: *const GSTimeZone,
        strBuf: *mut GSChar,
        bufSize: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn gsParseTimeZone(str_: *const GSChar, zone: *mut GSTimeZone) -> GSBool;
}
extern "C" {
    pub fn gsGetErrorStackSize(gsResource: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn gsGetErrorCode(gsResource: *mut ::std::os::raw::c_void, stackIndex: size_t) -> GSResult;
}
extern "C" {
    pub fn gsFormatErrorMessage(
        gsResource: *mut ::std::os::raw::c_void,
        stackIndex: size_t,
        strBuf: *mut GSChar,
        bufSize: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn gsFormatErrorLocation(
        gsResource: *mut ::std::os::raw::c_void,
        stackIndex: size_t,
        strBuf: *mut GSChar,
        bufSize: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn gsIsRecoverableError(result: GSResult) -> GSBool;
}
extern "C" {
    pub fn gsIsTimeoutError(result: GSResult) -> GSBool;
}
extern "C" {
    pub fn gsFormatErrorName(
        gsResource: *mut ::std::os::raw::c_void,
        stackIndex: size_t,
        strBuf: *mut GSChar,
        bufSize: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn gsFormatErrorDescription(
        gsResource: *mut ::std::os::raw::c_void,
        stackIndex: size_t,
        strBuf: *mut GSChar,
        bufSize: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn gsGetErrorParameterCount(
        gsResource: *mut ::std::os::raw::c_void,
        stackIndex: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn gsFormatErrorParameterName(
        gsResource: *mut ::std::os::raw::c_void,
        stackIndex: size_t,
        parameterIndex: size_t,
        strBuf: *mut GSChar,
        bufSize: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn gsFormatErrorParameterValue(
        gsResource: *mut ::std::os::raw::c_void,
        stackIndex: size_t,
        parameterIndex: size_t,
        strBuf: *mut GSChar,
        bufSize: size_t,
    ) -> size_t;
}
